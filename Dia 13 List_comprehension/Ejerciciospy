## 💻 Exercises: Day 13

##1. Filter only negative and zero in the list using list comprehension
#   ```py
#   numbers = [-4, -3, -2, -1, 0, 2, 4, 6]
#   ```

print('''Ejercicio 1:
      Filtrar solo los negativos y ceros en la lista usando la comprensión de listas.
''')

num = [-4, -3, -2, -1, 0, 2, 4, 6]
negativosycero = [i for i in num if i<=0]

print(negative_and_zero)

##2. Flatten the following list of lists of lists to a one dimensional list :

#   ```py
#   list_of_lists =[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]]

#   output
#   [1, 2, 3, 4, 5, 6, 7, 8, 9]
 #  ```

print('''Ejercicio 2:
      Aplanar la siguiente lista de listas de listas a una lista unidimensional
''')

lstdelsts = [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]]
lst=[number for linea in lstdelsts for number in linea]
lista_aplastada = [number for linea in lst for number in linea]

print(lista_aplastada)

##3. Using list comprehension create the following list of tuples:

print('''Ejercicio 3:
      Usando la comprensión de listas, cree la siguiente lista de tuplas
''')

'''[(0, 1, 0, 0, 0, 0, 0),
(1, 1, 1, 1, 1, 1, 1),
(2, 1, 2, 4, 8, 16, 32),
(3, 1, 3, 9, 27, 81, 243),
(4, 1, 4, 16, 64, 256, 1024),
(5, 1, 5, 25, 125, 625, 3125),
(6, 1, 6, 36, 216, 1296, 7776),
(7, 1, 7, 49, 343, 2401, 16807),
(8, 1, 8, 64, 512, 4096, 32768),
(9, 1, 9, 81, 729, 6561, 59049),
(10, 1, 10, 100, 1000, 10000, 100000)]'''

result = [(n, 1, n, n**2, n**3, n**4, n**5) for n in range(11)]
for item in result:
    print(item)

##4. Flatten the following list to a new list:
#   ```py
#   countries = [[('Finland', 'Helsinki')], [('Sweden', 'Stockholm')], [('Norway', 'Oslo')]]
#   output:
#   [['FINLAND','FIN', 'HELSINKI'], ['SWEDEN', 'SWE', 'STOCKHOLM'], ['NORWAY', 'NOR', 'OSLO']]
#   ```

print('''Ejercicio 4:
      Aplanar la siguiente lista a una nueva lista
''')

countries = [[('Finland', 'Helsinki')], [('Sweden', 'Stockholm')], [('Norway', 'Oslo')]]
paises=[country for line in countries for country in line]

print(paises)

result = [[name.upper(), name[:3].upper(), capital.upper()] for (name, capital) in paises]

print(result)

##5. Change the following list to a list of dictionaries:
#   ```py
#   countries = [[('Finland', 'Helsinki')], [('Sweden', 'Stockholm')], [('Norway', 'Oslo')]]
#   output:
#   [{'country': 'FINLAND', 'city': 'HELSINKI'},
#   {'country': 'SWEDEN', 'city': 'STOCKHOLM'},
#   {'country': 'NORWAY', 'city': 'OSLO'}]
#   ```

print('''Ejercicio 5:
      Cambie la siguiente lista a una lista de diccionarios.
''')

countries = [[('Finland', 'Helsinki')], [('Sweden', 'Stockholm')], [('Norway', 'Oslo')]]

'''[{'country': 'FINLAND', 'city': 'HELSINKI'},
{'country': 'SWEDEN', 'city': 'STOCKHOLM'},
{'country': 'NORWAY', 'city': 'OSLO'}]'''

result = [
    {'country': country.upper(), 'city': city.upper()}
    for [(country, city)] in countries
]

##6. Change the following list of lists to a list of concatenated strings:
#   ```py
#   names = [[('Asabeneh', 'Yetayeh')], [('David', 'Smith')], [('Donald', 'Trump')], [('Bill', 'Gates')]]
#   output
#   ['Asabeneh Yetaeyeh', 'David Smith', 'Donald Trump', 'Bill Gates']
#   ```

print('''Ejercicio 6:
      Cambie la siguiente lista de listas a una lista de cadenas concatenadas.
''')

nombres = [[('Asabeneh', 'Yetayeh')], [('David', 'Smith')], [('Donald', 'Trump')], [('Bill', 'Gates')]]

resultado = [' '.join(name_tuple) for [(name_tuple)] in nombres]

print(resultado)

##7. Write a lambda function which can solve a slope or y-intercept of linear functions.

print('''Ejercicio 7:
      Escriba una función lambda que pueda resolver una pendiente o una intersección con el eje y de funciones lineales
''')

linear_solver = lambda x1, y1, x2, y2, solve_for: (
    (y2 - y1) / (x2 - x1) #formula de la ´pendiente
    if solve_for == 'slope' 
    else         
    y1 - ((y2 - y1) / (x2 - x1)) * x1 
    if solve_for == 'y-intercept' else None)
m = linear_solver(2, 4, 6, 8, 'slope')       
b = linear_solver(2, 4, 6, 8, 'y-intercept')   

print(f"La ecuación de la recta es: y = {m}x + {b}")
